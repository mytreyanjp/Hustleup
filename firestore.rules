
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection
    // - Authenticated users can read and write their own profile document.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Gigs collection
    // - Anyone can read gigs (for browsing).
    // - Authenticated users can create gigs. (Client-side logic should ensure only clients see the "create gig" option).
    // - Authenticated users can update gigs. (Client-side logic should differentiate: clients update their own gig details, students update by applying).
    // - Only the client who created the gig can delete it.
    match /gigs/{gigId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null && request.auth.uid == resource.data.clientId;
    }

    // Transactions collection
    // - Authenticated users can create transactions. (Client-side ensures client initiates payment).
    // - Only users involved in the transaction (client or student) can read it.
    match /transactions/{transactionId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null &&
                     (request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.studentId);
    }

    // Chats & Messages
    // - Authenticated users can create chats if they are a participant.
    // - Authenticated users can read/write to chats they are part of.
    // (This assumes chat documents have a 'participants' array field containing user UIDs)
    match /chats/{chatId} {
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participants;
      allow read, update: if request.auth != null && request.auth.uid in resource.data.participants; // 'write' includes update and delete. Split if needed.

      // Messages subcollection within a chat
      // - Participants of the chat can read and create messages.
      match /messages/{messageId} {
        allow read, create: if request.auth != null &&
                               request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        // allow update, delete: if request.auth != null && request.auth.uid == resource.data.senderId; // Example: only sender can modify/delete
      }
    }
  }
}
